/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package es.uah.cc.ie.sources;

import com.sun.jersey.api.client.UniformInterfaceException;
import es.uah.cc.ie.SNSWebServicesClient.SNSdataBaseClient;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.Date;
import javax.mail.MessagingException;
import javax.mail.NoSuchProviderException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;
import org.openide.util.Exceptions;
import org.bouncycastle.crypto.BlockCipher;
import org.bouncycastle.crypto.BufferedBlockCipher;
import org.bouncycastle.crypto.DataLengthException;
import org.bouncycastle.crypto.InvalidCipherTextException;
import org.bouncycastle.crypto.engines.AESEngine;
import org.bouncycastle.crypto.modes.CBCBlockCipher;
import org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher;
import org.bouncycastle.crypto.params.KeyParameter;
import org.bouncycastle.util.encoders.UrlBase64;
import org.codehaus.jettison.json.JSONArray;

/**
 *
 * @author tote
 */
public class UserSettings {

    private String uid;
    private String userName;
    private String userEmail;
    private Boolean legalAccepted;
    private Date lastCheck;
    private String uidPublic;
    private Boolean appActivated;
    private String userSession;
    private String localeSettings;
    private Date backupCheck;
    private settingsFilter fltWall;
    private settingsFilter fltFriends;
    private settingsFilter fltPriv;
    private settingsFilter fltVist;
    private static SNSdataBaseClient client;
    private static SNSdataBaseIntegrator clientIntegrator;
    private String cf64 = "JJMAGICFBNANYANG";
    private String angelsSelected = "";
    private String context = "http://oe.dynalias.net:8080/";

    public UserSettings() {
    }

    public UserSettings(String uid, String userName, String userEmail, SNSdataBaseClient client, SNSdataBaseIntegrator clientIntegrator) {
        this.uid = uid;
        this.userName = userName;
        this.userEmail = userEmail;
        UserSettings.client = client;
        UserSettings.clientIntegrator = clientIntegrator;
    }

    public UserSettings(String uid, String userName, String userEmail, Boolean legalAccepted, Date lastCheck, String uidPublic, Boolean appActivated, String userSession, Date backupCheck, SNSdataBaseClient client) {
        this.uid = uid;
        this.userName = userName;
        this.userEmail = userEmail;
        this.legalAccepted = legalAccepted;
        this.lastCheck = lastCheck;
        this.uidPublic = uidPublic;
        this.appActivated = appActivated;
        this.userSession = userSession;
        this.backupCheck = backupCheck;
        this.fltWall = new settingsFilter();
        this.fltFriends = new settingsFilter();
        this.fltPriv = new settingsFilter();
        this.fltVist = new settingsFilter();
        UserSettings.client = client;
    }

    /**
     * @return the uid
     */
    public String getUid() {
        return uid;
    }

    /**
     * @param uid the uid to set
     */
    public void setUid(String uid) {
        this.uid = uid;
    }

    /**
     * @return the userName
     */
    public String getUserName() {
        return userName;
    }

    /**
     * @param userName the userName to set
     */
    public void setUserName(String userName) {
        this.userName = userName;
    }

    /**
     * @return the userEmail
     */
    public String getUserEmail() {
        return userEmail;
    }

    /**
     * @param userEmail the userEmail to set
     */
    public void setUserEmail(String userEmail) {
        this.userEmail = userEmail;
    }

    /**
     * @return the legalAccepted
     */
    public Boolean isLegalAccepted() {
        return legalAccepted;
    }

    /**
     * @param legalAccepted the legalAccepted to set
     */
    public void setLegalAccepted(Boolean legalAccepted) {
        this.legalAccepted = legalAccepted;
    }

    /**
     * @return the lastCheck
     */
    public Date getLastCheck() {
        return lastCheck;
    }

    /**
     * @param lastCheck the lastCheck to set
     */
    public void setLastCheck(Date lastCheck) {
        this.lastCheck = lastCheck;
    }

    /**
     * @return the uidPublicLocal
     */
    public String getUidPublic() {
        return uidPublic;
    }

    /**
     * @param uidPublicLocal the uidPublicLocal to set
     */
    public void setUidPublic(String uidPublic) {
        this.uidPublic = uidPublic;
    }

    /**
     * @return the appActivated
     */
    public Boolean isAppActivated() {
        return appActivated;
    }

    /**
     * @param appActivated the appActivated to set
     */
    public void setAppActivated(Boolean appActivated) {
        this.appActivated = appActivated;
    }

    /**
     * @return the userSession
     */
    public String getUserSession() {
        return userSession;
    }

    /**
     * @param userSession the userSession to set
     */
    public void setUserSession(String userSession) {
        this.userSession = userSession;
    }

    /**
     * @return the localeSettings
     */
    public String getLocaleSettings() {
        return localeSettings;
    }

    /**
     * @param localeSettings the localeSettings to set
     */
    public void setLocaleSettings(String localeSettings) {
        this.localeSettings = localeSettings;
    }

    /**
     * @return the backupCheck
     */
    public Date getBackupCheck() {
        return backupCheck;
    }

    /**
     * @param backupCheck the backupCheck to set
     */
    public void setBackupCheck(Date backupCheck) {
        this.backupCheck = backupCheck;
    }

    /**
     * @return the fltWall
     */
    public settingsFilter getFltWall() {
        return fltWall;
    }

    /**
     * @param fltWall the fltWall to set
     */
    public void setFltWall(settingsFilter fltWall) {
        this.fltWall = fltWall;
    }

    /**
     * @return the fltFriends
     */
    public settingsFilter getFltFriends() {
        return fltFriends;
    }

    /**
     * @param fltFriends the fltFriends to set
     */
    public void setFltFriends(settingsFilter fltFriends) {
        this.fltFriends = fltFriends;
    }

    /**
     * @return the fltPriv
     */
    public settingsFilter getFltPriv() {
        return fltPriv;
    }

    /**
     * @param fltPriv the fltPriv to set
     */
    public void setFltPriv(settingsFilter fltPriv) {
        this.fltPriv = fltPriv;
    }

    /**
     * @return the fltVist
     */
    public settingsFilter getFltVist() {
        return fltVist;
    }

    /**
     * @param fltVist the fltVist to set
     */
    public void setFltVist(settingsFilter fltVist) {
        this.fltVist = fltVist;
    }

    /**
     * @return the client
     */
    public static SNSdataBaseClient getClient() {
        return client;
    }

    /**
     * @param aClient the client to set
     */
    public static void setClient(SNSdataBaseClient aClient) {
        client = aClient;
    }

    /**
     * @return the clientIntegrator
     */
    public static SNSdataBaseIntegrator getClientIntegrator() {
        return clientIntegrator;
    }

    /**
     * @param aClientIntegrator the clientIntegrator to set
     */
    public static void setClientIntegrator(SNSdataBaseIntegrator aClientIntegrator) {
        clientIntegrator = aClientIntegrator;
    }

    public String getIdLocale(JSONObject jsonLocale) throws JSONException {
        if (jsonLocale.getString("locale").substring(0, 2).equals("es")) {
            this.setLocaleSettings("00000002");
            return "00000002";
        } else {
            this.setLocaleSettings("00000001");
            return "00000001";
        }
    }

    public JSONObject getJSONLocale(String codLocale) {
        String locale = getClient().localeSettings_getLocaleSettingsById(codLocale, String.class);
        JSONObject jsonLocale = null;

        if (!locale.equals("{}") && !locale.contains("error_code")) {
            try {
                jsonLocale = new JSONObject(locale);
                jsonLocale.put("userSettingsCollection", "");
                return jsonLocale;
            } catch (JSONException ex) {
                Exceptions.printStackTrace(ex);
                return jsonLocale;
            }
        }
        return jsonLocale;
    }

    /**
     * @return the angelsSelected
     */
    public String getAngelsSelected() {
        return angelsSelected;
    }

    /**
     * @param angelsSelected the angelsSelected to set
     */
    public void setAngelsSelected(String angelsSelected) {
        this.angelsSelected = angelsSelected;
    }

    /**
     * @return the context
     */
    public String getContext() {
        return context;
    }

    /**
     * @param context the context to set
     */
    public void setContext(String context) {
        this.context = context;
    }

    /**
     * Cifra una cadena de texto
     * @param textoEnClaro Texto en claro que deseamos cifrar
     * @param clave Clave a utilizar en el proceso de cifrado
     * @return Cadena con el texto cifrado, codificada en Base64
     * @throws org.bouncycastle.crypto.DataLengthException
     * @throws java.lang.IllegalStateException
     * @throws org.bouncycastle.crypto.InvalidCipherTextException
     */
    public static String cifrar(String textoEnClaro, String clave)
            throws DataLengthException,
            IllegalStateException,
            InvalidCipherTextException {
        // Obtenemos los valores binarios del texto en claro y la clave
        byte[] textoEnClaroB = textoEnClaro.getBytes();
        byte[] claveB = clave.getBytes();
        // Instanciamos un motor de cifrado para el algoritmo AES
        BlockCipher engine = new AESEngine();
        // Creamos el cifrador con padding y en modo CBC
        BufferedBlockCipher cipher = new PaddedBufferedBlockCipher(new CBCBlockCipher(engine));
        // Inicializamos el cifrador en modo cifrado
        cipher.init(true, new KeyParameter(claveB));
        // Instanciamos el vector de bytes para almacenar el criptograma
        byte[] criptograma = new byte[cipher.getOutputSize(textoEnClaroB.length)];
        // Procesa todos los bytes del texto en claro
        int temp = cipher.processBytes(textoEnClaroB, 0, textoEnClaroB.length, criptograma, 0);
        // Finaliza el proceso de cifrado
        cipher.doFinal(criptograma, temp);
        // Codifica el criptograma en Base64
        String criptogramaB64 = new String(UrlBase64.encode(criptograma));
        System.out.println("CLAVE CIFRADA: " + criptogramaB64);
        return criptogramaB64;
    }

    /**
     * Descifra una cadena de texto
     * @param criptogramaB64 Criptograma con el texto cifrado, codificado en Base64
     * @param clave Clave a utilizar en el proceso de descifrado
     * @return Texto en claro resultante del proceso de descifrado
     * @throws org.bouncycastle.crypto.DataLengthException
     * @throws java.lang.IllegalStateException
     * @throws org.bouncycastle.crypto.InvalidCipherTextException
     */
    public static String descifrar(String criptogramaB64, String clave)
            throws DataLengthException,
            IllegalStateException,
            InvalidCipherTextException {
        // Obtenemos los valores binarios del criptograma y la clave
        byte[] criptogramaB = UrlBase64.decode(criptogramaB64.getBytes());
        byte[] claveB = clave.getBytes();
        // Instanciamos un motor de cifrado para el algoritmo AES
        BlockCipher engine = new AESEngine();
        // Creamos el cifrador con padding y en modo CBC
        BufferedBlockCipher cipher = new PaddedBufferedBlockCipher(new CBCBlockCipher(engine));
        // Inicializamos el cifrador en modo cifrado
        cipher.init(false, new KeyParameter(claveB));
        // Instanciamos el vector de bytes para almacenar el texto en claro
        byte[] textoEnClaro = new byte[cipher.getOutputSize(criptogramaB.length)];
        // Procesa todos los bytes del criptograma
        int temp = cipher.processBytes(criptogramaB, 0, criptogramaB.length, textoEnClaro, 0);
        // Finaliza el proceso de descifrado
        cipher.doFinal(textoEnClaro, temp);
        return new String(textoEnClaro);
    }

    public JSONObject getNewInstanceUS(HttpServletRequest request, HttpServletResponse response) throws JSONException, DataLengthException, IllegalStateException, InvalidCipherTextException, UnsupportedEncodingException, UniformInterfaceException, IOException, NoSuchProviderException, MessagingException {
        String uidPublicLocal = "";
        HttpSession sesion = request.getSession(false);
        this.setLegalAccepted(true);

        JSONObject newInstance = new JSONObject();
        System.out.println("UID NUEVA: " + this.getUid());
        newInstance.put("uid", this.getUid());
        newInstance.put("userName", this.getUserName());
        newInstance.put("userEmail", this.getUserEmail());
        if (this.isLegalAccepted()) {
            newInstance.put("legalAccepted", "1");
        } else {
            newInstance.put("legalAccepted", "0");
        }
        newInstance.put("lastCheck", "");
        newInstance.put("backupCheck", "");
        uidPublicLocal = UserSettings.cifrar(this.getUid(), this.cf64);
        this.setUidPublic(uidPublicLocal);
        newInstance.put("uidPublic", this.getUidPublic());
        if (this.isAppActivated()) {
            newInstance.put("appActivated", "1");
        } else {
            newInstance.put("appActivated", "0");
        }
        newInstance.put("userSession", this.getUserSession());
        newInstance.put("localeSettings", getJSONLocale(this.getLocaleSettings()));
        System.out.println("NUEVA INSTANCIA BBDD: " + newInstance.toString());
        try {
            client.setEntityUserSettings(String.class, newInstance);
            this.putNewAngels(true);
            this.getNewAngels();
            this.putNewInstanceFilter("fltFriends", true);
            this.putNewInstanceFilter("fltPriv", true);
            this.putNewInstanceFilter("fltWall", true);
            this.putNewInstanceFilter("fltVist", true);
            return newInstance;
        } catch (Exception e) {
            e.printStackTrace();
            response.sendRedirect(request.getContextPath() + "/informationMessage.jsp?par1=2");
            return null;
        }
    }

    public void setAngelsUserSettings() throws JSONException, NoSuchProviderException, MessagingException, UniformInterfaceException, IOException {
        this.putNewAngels(false);
        this.deleteAngelsRelationship();
        this.deleteOlderAngels();
        this.getNewAngels();
        this.putNewInstanceFilter("fltFriends", false);
        this.putNewInstanceFilter("fltPriv", false);
        this.putNewInstanceFilter("fltWall", false);
        this.putNewInstanceFilter("fltVist", false);
    }

    public void setAngelsUserSettingsByFilter(String desFilter) throws JSONException, UnsupportedEncodingException, UniformInterfaceException, IOException, NoSuchProviderException, MessagingException{
        this.putNewAngels(false);
        this.deleteAngelsRelationship();
        this.deleteOlderAngels();
        this.getNewAngels();
        this.putNewInstanceFilter(desFilter, false);
    }

    public void setCollectionAngels(JSONObject jsonAngel, int modo, String des) throws JSONException {
        JSONObject jsonCollection = null;
        JSONObject jsonUri = null;

        switch (modo) {
            case 1:
                jsonCollection = jsonAngel.getJSONObject("userSettingsCollection");
                jsonUri = new JSONObject();

                jsonUri.put("@uri", this.getContext() + "SNSdataBaseIntegratorServer/resources/settingsAngelss/" + jsonAngel.getString("uidAngel") + "/userSettingsCollection/" + this.getUid() + "/");
                jsonCollection.put("userSettings", jsonUri);

                jsonAngel.put("userSettingsCollection", jsonCollection);
                break;
            case 2:
                jsonCollection = jsonAngel.getJSONObject("settings" + des + "Collection");
                jsonUri = new JSONObject();

                jsonUri.put("@uri", this.getContext() + "SNSdataBaseIntegratorServer/resources/settingsAngelss/" + jsonAngel.getString("uidAngel") + "/settings" + des + "Collection/" + this.getUid() + "/");
                jsonCollection.put("settings" + des, jsonUri);

                jsonAngel.put("settings" + des + "Collection", jsonCollection);
                break;
        }
        try {
            client.userSettings_setAngelsCollection(String.class, jsonAngel.getString("uidAngel"), jsonAngel);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void getNewAngels() throws JSONException {
        System.out.println("DENTRO GET NEW ANGELS");
        String respuesta = "";
        JSONObject jsonRespuesta = null;
        JSONObject jsonAngel = null;
        JSONArray jsonArrayAngels = null;
        respuesta = client.settingsAngels_getAngelsByUid(String.class, "\"" + this.getUid() + "\"");
        jsonRespuesta = new JSONObject(respuesta);
        jsonArrayAngels = this.clientIntegrator.getJSONArray(jsonRespuesta.getString("settingsAngels"));

        for (int i = 0; i < jsonArrayAngels.length(); i++) {
            jsonAngel = jsonArrayAngels.getJSONObject(i);
            setCollectionAngels(jsonAngel, 1, "");
        }
        System.out.println("FUERA GET NEW ANGELS");
    }

    public void deleteAngelsRelationship() throws JSONException {
        System.out.println("DENTRO DELETE ANGELS RELATIONSHIP");
        String respuesta = "";
        JSONObject jsonRespuesta = null;
        JSONObject jsonAngel = null;
        JSONArray jsonArrayAngels = null;
        respuesta = client.settingsAngels_getAngelsByUid(String.class, "\"" + this.getUid() + "\"");
        jsonRespuesta = new JSONObject(respuesta);
        jsonArrayAngels = this.clientIntegrator.getJSONArray(jsonRespuesta.getString("settingsAngels"));

        for (int i = 0; i < jsonArrayAngels.length(); i++) {
            jsonAngel = jsonArrayAngels.getJSONObject(i);

            jsonAngel = deleteCollection(jsonAngel, "fltWall", 2);
            jsonAngel = deleteCollection(jsonAngel, "fltFriends", 2);
            jsonAngel = deleteCollection(jsonAngel, "fltPriv", 2);
            jsonAngel = deleteCollection(jsonAngel, "fltVist", 2);
            jsonAngel = deleteCollection(jsonAngel, "", 1);

            try {
                System.out.println("DELETE REL: " + jsonAngel.toString());
                client.userSettings_setAngelsCollection(String.class, jsonAngel.getString("uidAngel"), jsonAngel);
            } catch (Exception e) {
                System.out.println("Modificación realizada en user settings");
            }
        }
        System.out.println("FUERA DELETE ANGELS RELATIONSHIP");
    }

    public JSONObject deleteCollection(JSONObject jsonAngel, String des, int mode) throws JSONException {
        JSONObject jsonUri = null;

        switch (mode) {
            case 1:
                jsonUri = new JSONObject();
                jsonUri.put("@uri", this.getContext() + "SNSdataBaseIntegratorServer/resources/settingsAngelss/" + jsonAngel.getString("uidAngel") + "/userSettingsCollection/");
                jsonAngel.put("userSettingsCollection", jsonUri);
                break;
            case 2:
                jsonUri = new JSONObject();
                jsonUri.put("@uri", this.getContext() + "SNSdataBaseIntegratorServer/resources/settingsAngelss/" + jsonAngel.getString("uidAngel") + "/settings" + des + "Collection/");
                jsonAngel.put("settings" + des + "Collection", jsonUri);
                break;
        }
        return jsonAngel;
    }

    public void setNotActiveAngels() throws JSONException {
        String respuesta = "";
        JSONObject jsonRespuesta = null;
        JSONObject jsonAngel = null;
        JSONArray jsonArrayAngels = null;
        respuesta = client.settingsAngels_getAngelsByUid(String.class, "\"" + this.getUid() + "\"");
        jsonRespuesta = new JSONObject(respuesta);
        jsonArrayAngels = clientIntegrator.getJSONArray(jsonRespuesta.getString("settingsAngels"));

        for (int i = 0; i < jsonArrayAngels.length(); i++) {
            jsonAngel = jsonArrayAngels.getJSONObject(i);
            if (!isActiveAngel(jsonAngel)) {
                jsonAngel.put("acceptAngel", "0");
                try {
                    client.userSettings_setAngelsCollection(String.class, jsonAngel.getString("uidAngel"), jsonAngel);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public boolean isActiveAngel(JSONObject jsonAngel) throws JSONException {
        boolean active = true;
        JSONObject jsonSettings = jsonAngel.getJSONObject("userSettingsCollection");

        if (jsonSettings.getString("userSettings").equals("")) {
            active = false;
        }

        return active;
    }

    public boolean isSelectedArray(String angelsSelected, String angel) {
        boolean seleccionado = false;

        if (!angelsSelected.equals("") && angelsSelected != null) {
            String[] arrayAngels = angelsSelected.split((";"));

            for (int i = 0; i < arrayAngels.length; i++) {
                if (angel.equals(arrayAngels[i])) {
                    seleccionado = true;
                    break;
                }
            }
        }
        return seleccionado;
    }

    public JSONArray getAngels(String[][] arrayAngels) throws JSONException {
        String[] arrayAngelsSelected = this.getAngelsSelected().split(";");
        JSONArray jsonAngelsFilter = new JSONArray();
        JSONObject jsonDatesAngel = null;

        for (int i = 0; i < arrayAngelsSelected.length; i++) {
            for (int j = 0; j < arrayAngels.length; j++) {
                if (arrayAngelsSelected[i].equals(arrayAngels[j][0])) {
                    jsonDatesAngel = new JSONObject();
                    jsonDatesAngel.put("idAngel", arrayAngels[j][0]);
                    jsonDatesAngel.put("nameAngel", arrayAngels[j][1]);
                    jsonDatesAngel.put("imgAngel", arrayAngels[j][2]);
                    jsonDatesAngel.put("typeAngel", arrayAngels[j][3]);
                    jsonDatesAngel.put("acceptAngel", "0");
                    jsonDatesAngel.put("userPropAngel", this.getUid());
                    jsonDatesAngel.put("confirmAngel", "0");

                    jsonAngelsFilter.put(jsonDatesAngel);
                }
            }
        }
        return jsonAngelsFilter;
    }

    public void gelAngelsUserFilter(String[][] arrayAngels, String angelsFilter) {
        System.out.println("GEL ANGELS FILTER ANGELS: " + angelsFilter);
        System.out.println("GEL ANGELS FILTER LONGIT: " + arrayAngels.length);
        if (!angelsFilter.equals("")) {
            String[] arrayAngelsFilter = angelsFilter.split(";");

            for (int i = 0; i < arrayAngelsFilter.length; i++) {
                for (int j = 0; j < arrayAngels.length; j++) {
                    if (arrayAngelsFilter[i].equals(arrayAngels[j][0])) {
                        if (!isSelectedArray(this.angelsSelected, arrayAngelsFilter[i])) {
                            if (this.getAngelsSelected().equals("")) {
                                this.setAngelsSelected(arrayAngelsFilter[i] + ";");
                            } else {
                                this.setAngelsSelected(this.getAngelsSelected() + arrayAngelsFilter[i] + ";");
                            }
                        }
                    }
                }
            }
        }
    }

    public JSONArray putNewAngels(boolean inicio) throws JSONException, UnsupportedEncodingException, UniformInterfaceException, IOException, NoSuchProviderException, MessagingException {
        System.out.println("DENTRO SET ANGELS PUT");
        this.gelAngelsUserFilter(getClientIntegrator().getArrayAngelsSelected(), this.getFltWall().getAngels());
        this.gelAngelsUserFilter(getClientIntegrator().getArrayAngelsSelected(), this.getFltFriends().getAngels());
        this.gelAngelsUserFilter(getClientIntegrator().getArrayAngelsSelected(), this.getFltPriv().getAngels());
        this.gelAngelsUserFilter(getClientIntegrator().getArrayAngelsSelected(), this.getFltVist().getAngels());

        JSONArray angels = this.getAngels(getClientIntegrator().getArrayAngelsSelected());
        System.out.println("ANGELES NUEVOS: " + angels.toString());
        if (inicio) {
            for (int i = 0; i < angels.length(); i++) {
                client.settingsAngels_setAngels(String.class, angels.getJSONObject(i));
            }
        } else {
            System.out.println("NO NUEVA CONEXION");
            String respuesta = "";
            boolean isAngelNew = false;
            JSONObject jsonRespuesta = null;
            JSONObject jsonAngel = null;
            JSONObject jsonAngelDB = null;
            JSONArray jsonArrayDB = null;

            respuesta = client.settingsAngels_getAngelsByUid(String.class, "\"" + this.getUid() + "\"");
            jsonRespuesta = new JSONObject(respuesta);
            jsonArrayDB = clientIntegrator.getJSONArray(jsonRespuesta.getString("settingsAngels"));
            System.out.println("ANGELES ACTUALES: " + jsonArrayDB.toString());

            for (int i = 0; i < angels.length(); i++) {
                isAngelNew = true;
                // Angel nuevo
                jsonAngel = angels.getJSONObject(i);
                for (int j = 0; j < jsonArrayDB.length(); j++) {
                    System.out.println("BUSCANDO " + j);
                    // Angel en la BD
                    jsonAngelDB = jsonArrayDB.getJSONObject(j);
                    if (jsonAngelDB.getString("idAngel").equals(jsonAngel.getString("idAngel"))) {
                        isAngelNew = false;
                        break;
                    }
                }
                if (isAngelNew) {
                    System.out.println("NUEVO ANGEL");
                    client.settingsAngels_setAngels(String.class, jsonAngel);
                    jsonAngel = findAngel(jsonAngel);
                    if (!jsonAngel.toString().equals("{}")) {
                        clientIntegrator.sendMailConfirmationAngel(jsonAngel, this.getUidPublic());
                    }
                }
            }
            setToDelOlderAngels(angels);
        }
        System.out.println("FUERA SET ANGELS PUT");
        return angels;
    }

    public JSONObject findAngel(JSONObject jsonAngel) throws JSONException {
        String respuesta = client.settingsAngels_getAngelsByUid(String.class, "\"" + this.getUid() + "\"");
        JSONObject jsonRespuesta = new JSONObject(respuesta);
        JSONArray jsonArrayDB = clientIntegrator.getJSONArray(jsonRespuesta.getString("settingsAngels"));
        JSONObject jsonAngelDB = null;
        boolean encontrado = false;
        System.out.println("ANGELES ACTUALES TRAS NUEVO ANGEL: " + jsonArrayDB.toString());

        for (int i = 0; i < jsonArrayDB.length(); i++) {
            System.out.println("BUSCANDO " + i);
            // Angel en la BD
            jsonAngelDB = jsonArrayDB.getJSONObject(i);
            if (jsonAngelDB.getString("idAngel").equals(jsonAngel.getString("idAngel"))) {
                encontrado = true;
                break;
            }
        }

        if (encontrado) {
            return jsonAngelDB;
        } else {
            return new JSONObject();
        }
    }

    public void setToDelOlderAngels(JSONArray angels) throws JSONException {
        String respuesta = client.settingsAngels_getAngelsByUid(String.class, "\"" + this.getUid() + "\"");
        JSONObject jsonRespuesta = new JSONObject(respuesta);
        JSONObject jsonAngel = null;
        JSONObject jsonAngelDB = null;
        JSONArray jsonArrayDB = clientIntegrator.getJSONArray(jsonRespuesta.getString("settingsAngels"));
        System.out.println("ANGELES ACTUALES DELETE: " + jsonArrayDB.toString());
        boolean isNotSelected = true;

        for (int i = 0; i < jsonArrayDB.length(); i++) {
            isNotSelected = true;
            // Angel nuevo
            jsonAngelDB = jsonArrayDB.getJSONObject(i);
            for (int j = 0; j < angels.length(); j++) {
                // Angel en la BD
                jsonAngel = angels.getJSONObject(j);
                System.out.println("BUSCANDO PARA BORRAR " + jsonAngel.toString());
                if (jsonAngel.getString("idAngel").equals(jsonAngelDB.getString("idAngel"))) {
                    isNotSelected = false;
                    break;
                }
            }
            if (isNotSelected) {

                jsonAngelDB.put("acceptAngel", "0");
                jsonAngelDB.put("confirmAngel", "1");
                System.out.println("ANGEL NO SELECCIONADO: " + jsonAngelDB.toString());
                try {
                    client.settingsAngels_setAngelById(String.class, jsonAngelDB.getString("uidAngel"), jsonAngelDB);
                } catch (Exception e) {
                    System.out.println("ANGEL ACTUALIZADO");
                    e.printStackTrace();
                }
            }
        }
    }

    public void deleteOlderAngels() throws JSONException, NoSuchProviderException, MessagingException, UniformInterfaceException, IOException {
        System.out.println("INICIO DELETE OLDER");
        String respuesta = client.settingsAngels_getAngelsByUid(String.class, "\"" + this.getUid() + "\"");
        JSONObject jsonRespuesta = new JSONObject(respuesta);
        JSONObject jsonAngelDB = null;
        JSONArray jsonArrayDB = clientIntegrator.getJSONArray(jsonRespuesta.getString("settingsAngels"));

        for (int i = 0; i < jsonArrayDB.length(); i++) {
            jsonAngelDB = jsonArrayDB.getJSONObject(i);
            System.out.println("EMPEZAMOS DELETE ANGEL " + i + ": " + jsonAngelDB.toString());
            if (jsonAngelDB.getString("acceptAngel").equals("0") && jsonAngelDB.getString("confirmAngel").equals("1")) {
                // Borrar Angel TEST RESTFUL
                System.out.println("ANGEL A BORRAR: " + jsonAngelDB.toString());
                try {
                    client.settingsAngels_delAngel(jsonAngelDB.getString("uidAngel"));
                    System.out.println("ANGEL BORRADO: " + jsonAngelDB.getString("uidAngel"));
                    // Enviar correo de confirmación angel borrado
                    clientIntegrator.sendMailDeleteAngel(jsonAngelDB, this.getUidPublic());
                } catch (Exception e) {
                    System.out.println("ANGEL BORRADO EXCEPTION: " + jsonAngelDB.getString("uidAngel"));
                    e.printStackTrace();
                }
            }
        }
        System.out.println("FIN DELETE OLDER");
    }

    public void putAngelsFilter(JSONArray angelsFilter, String des) throws JSONException {
        String respuesta = "";
        JSONObject jsonRespuesta = null;
        JSONObject jsonAngel = null;
        JSONArray jsonArrayAngels = null;
        respuesta = client.settingsAngels_getAngelsByUid(String.class, "\"" + this.getUid() + "\"");
        jsonRespuesta = new JSONObject(respuesta);
        jsonArrayAngels = this.clientIntegrator.getJSONArray(jsonRespuesta.getString("settingsAngels"));

        for (int j = 0; j < angelsFilter.length(); j++) {
            for (int i = 0; i < jsonArrayAngels.length(); i++) {
                jsonAngel = jsonArrayAngels.getJSONObject(i);
                if (angelsFilter.getJSONObject(j).getString("idAngel").equals(jsonAngel.getString("idAngel"))) {
                    setCollectionAngels(jsonAngel, 2, des);
                }
            }
        }
    }

    public JSONObject putNewInstanceFilter(String des, boolean inicio) throws JSONException {
        JSONObject newInstanceFilter = null;
        JSONArray jsonAngFilter = null;

        if (des.equals("fltWall")) {
            newInstanceFilter = this.getFltWall().getObjectFilter(des);
            if (inicio) {
                client.settingsFltWall_setNewUser(String.class, newInstanceFilter);
            } else {
                try {
                    client.settingsFltWall_setFilter(String.class, this.getUid(), newInstanceFilter);
                } catch (Exception e) {
                    System.out.println("FILTRO WALL ACTUALIZADO PARA USUARIO: " + this.getUid());
                }
            }
            jsonAngFilter = this.getFltWall().getAngelsFilter(getClientIntegrator().getArrayAngelsSelected());
            putAngelsFilter(jsonAngFilter, "fltWall");
        } else if (des.equals("fltFriends")) {
            newInstanceFilter = this.getFltFriends().getObjectFilter(des);
            if (inicio) {
                client.settingsFltFriends_setNewUser(String.class, newInstanceFilter);
            } else {
                try {
                    client.settingsFltFriends_setFilter(String.class, this.getUid(), newInstanceFilter);
                } catch (Exception e) {
                    System.out.println("FILTRO FRIENDS ACTUALIZADO PARA USUARIO: " + this.getUid());
                }
            }
            jsonAngFilter = this.getFltFriends().getAngelsFilter(getClientIntegrator().getArrayAngelsSelected());
            putAngelsFilter(jsonAngFilter, "fltFriends");
        } else if (des.equals("fltPriv")) {
            newInstanceFilter = this.getFltPriv().getObjectFilter(des);
            if (inicio) {
                client.settingsFltPriv_setNewUser(String.class, newInstanceFilter);
            } else {
                try {
                    client.settingsFltPriv_setFilter(String.class, this.getUid(), newInstanceFilter);
                } catch (Exception e) {
                    System.out.println("FILTRO PRIV ACTUALIZADO PARA USUARIO: " + this.getUid());
                }
            }
            jsonAngFilter = this.getFltPriv().getAngelsFilter(getClientIntegrator().getArrayAngelsSelected());
            putAngelsFilter(jsonAngFilter, "fltPriv");
        } else if (des.equals("fltVist")) {
            newInstanceFilter = this.getFltVist().getObjectFilter(des);
            if (inicio) {
                client.settingsFltVist_setNewUser(String.class, newInstanceFilter);
            } else {
                try {
                    client.settingsFltVist_setFilter(String.class, this.getUid(), newInstanceFilter);
                } catch (Exception e) {
                    System.out.println("FILTRO VIST ACTUALIZADO PARA USUARIO: " + this.getUid());
                }
            }
            jsonAngFilter = this.getFltVist().getAngelsFilter(getClientIntegrator().getArrayAngelsSelected());
            putAngelsFilter(jsonAngFilter, "fltVist");
        }

        return newInstanceFilter;
    }

    public String formatJsonLstAngel(JSONArray jsonAngels, String desTypeAngel, String des) throws JSONException {
        JSONObject jsonAngel = null;
        JSONObject aux = null;
        String angels = "";

        for (int i = 0; i < jsonAngels.length(); i++) {
            jsonAngel = jsonAngels.getJSONObject(i);

            if (jsonAngel.getString("typeAngel").equals(desTypeAngel)) {
                aux = new JSONObject();
                aux.put("nameAngel" + des, jsonAngel.getString("nameAngel"));
                aux.put("emailAngel" + des, jsonAngel.getString("idAngel"));
                if (i == 0) {
                    angels = aux.toString() + ";";
                } else {
                    angels += aux.toString() + ";";
                }
            }
        }

        System.out.println("ANGELS ANTES " + des + ": " + angels);

        return angels;
    }

    public String getAngelsUser(String desTypeAngel) throws JSONException {
        String strListAngels = client.settingsAngels_getAngelsByUid(String.class, "\"" + this.getUid() + "\"");
        String angels = "";

        if (!strListAngels.equals("") && !strListAngels.equals("{}")) {
            JSONObject jsonAngel = null;
            JSONObject jsonAngels = new JSONObject(strListAngels);
            JSONArray jsonArrayAngels = this.clientIntegrator.getJSONArray(jsonAngels.getString("settingsAngels"));

            if (desTypeAngel.equals("G")) {
                angels = formatJsonLstAngel(jsonArrayAngels, desTypeAngel, "GoogleSelected");
            } else if (desTypeAngel.equals("O")) {
                angels = formatJsonLstAngel(jsonArrayAngels, desTypeAngel, "Ed");
            } else {
                for (int i = 0; i < jsonArrayAngels.length(); i++) {
                    jsonAngel = jsonArrayAngels.getJSONObject(i);

                    if (jsonAngel.getString("typeAngel").equals(desTypeAngel)) {
                        if (i == 0) {
                            angels = jsonAngel.getString("idAngel") + ";";
                        } else {
                            angels += jsonAngel.getString("idAngel") + ";";
                        }
                    }
                }
                System.out.println("ANGELES ANTES FB: " + angels);
            }
        }

        return angels;
    }

    public void loadFilter(String des) throws JSONException {
        JSONObject jsonFilter = null;
        JSONObject jsonAngels = null;
        JSONArray jsonArrayAngels = null;

        if (des.equals("fltWall")) {
            jsonFilter = new JSONObject(client.settingsFltWall_getUserById(String.class, this.getUid()));
            jsonAngels = new JSONObject(client.settingsFltWall_getAngelsCollection(String.class, this.getUid()));
            try {
                jsonArrayAngels = getClientIntegrator().getJSONArray(jsonAngels.getString("settingsAngels"));
                System.out.println("ARRAY JSON: " + jsonArrayAngels.toString());
                this.getFltWall().loadSettingsFilter(jsonFilter, jsonArrayAngels, des);
            } catch (Exception e) {
                System.out.println("NO EXISTEN ANGELES PARA EL FILTRO " + des);
            }
        } else if (des.equals("fltFriends")) {
            jsonFilter = new JSONObject(client.settingsFltFriends_getUserById(String.class, this.getUid()));
            jsonAngels = new JSONObject(client.settingsFltFriends_getAngelsCollection(String.class, this.getUid()));
            try {
                jsonArrayAngels = getClientIntegrator().getJSONArray(jsonAngels.getString("settingsAngels"));
                this.getFltFriends().loadSettingsFilter(jsonFilter, jsonArrayAngels, des);
            } catch (Exception e) {
                System.out.println("NO EXISTEN ANGELES PARA EL FILTRO " + des);
            }
        } else if (des.equals("fltPriv")) {
            jsonFilter = new JSONObject(client.settingsFltPriv_getUserById(String.class, this.getUid()));
            jsonAngels = new JSONObject(client.settingsFltPriv_getAngelsCollection(String.class, this.getUid()));
            try {
                jsonArrayAngels = getClientIntegrator().getJSONArray(jsonAngels.getString("settingsAngels"));
                this.getFltPriv().loadSettingsFilter(jsonFilter, jsonArrayAngels, des);
            } catch (Exception e) {
                System.out.println("NO EXISTEN ANGELES PARA EL FILTRO " + des);
            }
        } else if (des.equals("fltVist")) {
            jsonFilter = new JSONObject(client.settingsFltVist_getUserById(String.class, this.getUid()));
            jsonAngels = new JSONObject(client.settingsFltVist_getAngelsCollection(String.class, this.getUid()));
            try {
                jsonArrayAngels = getClientIntegrator().getJSONArray(jsonAngels.getString("settingsAngels"));
                this.getFltVist().loadSettingsFilter(jsonFilter, jsonArrayAngels, des);
            } catch (Exception e) {
                System.out.println("NO EXISTEN ANGELES PARA EL FILTRO " + des);
            }
        }
    }
}
